# JDBC 逻辑库名称。在集群模式中，使用该参数来联通 ShardingSphere-JDBC 与 ShardingSphere-Proxy。
# 默认值：logic_db
databaseName: logic_db

mode:
  type: Standalone
  repository:
    type: JDBC

dataSources:
  server-user:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3301/db_user?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: 123456
    # 连接池配置
    maximumPoolSize: 10
    minimumIdle: 5
    connectionTimeout: 30000
    idleTimeout: 600000
    maxLifetime: 1800000
  server-order0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3310/db_order?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: 123456
    # 连接池配置
    maximumPoolSize: 10
    minimumIdle: 5
    connectionTimeout: 30000
    idleTimeout: 600000
    maxLifetime: 1800000
  server-order1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3311/db_order?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: 123456
    # 连接池配置
    maximumPoolSize: 10
    minimumIdle: 5
    connectionTimeout: 30000
    idleTimeout: 600000
    maxLifetime: 1800000

rules:
  # 数据分片，数据究竟写入/读取 哪个库，哪个表，按什么算法来确定
- !SHARDING
  tables:
    # 逻辑表名称
    t_user:
      actualDataNodes: server-user.t_user # 由数据源名 + 表名组成
    # 逻辑表名称
    t_order:
      actualDataNodes: server-order${0..1}.t_order${0..1} # 由数据源名 + 表名组成（参考 Inline 语法规则）
      databaseStrategy: #分库配置 缺省表示使用默认分库策略，分片策略只能选其一
        standard: # 用于单分片键的标准分片场景
          shardingColumn: user_id # 分片列名称
          shardingAlgorithmName: database_inline  # 分片算法名称（自定义）会与下方shardingAlgorithms对应
      tableStrategy: # 分表策略，同分库策略
        standard:
          shardingColumn: order_no
          shardingAlgorithmName: t_order_inline # 分片算法名称（自定义）会与下方shardingAlgorithms对应
#      keyGenerateStrategy: # 分布式序列策略
#        column: id # 自增列名称，缺省表示不使用自增主键生成器
#        keyGeneratorName: snowflake # 分布式序列算法名称,这里是个名字，下边(shardingAlgorithms)有定义

#  defaultDatabaseStrategy: #默认数据库分片策略
#  defaultTableStrategy: #默认的表分片策略
#  defaultKeyGenerateStrategy: # 默认的分布式序列策略
#  defaultShardingColumn: # 默认分片列名称

  # 分片算法配置
  shardingAlgorithms:
    database_inline: # 自定义的算法名称，上边有用到
      type: INLINE # 分片算法类型,有多钟可参考官网 https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/common-config/builtin-algorithm/sharding/
      props: # 分片算法属性配置
        algorithm-expression: server-order${user_id % 2} #根据用户id 对2（因为有2个数据库）取余数，type 为INLINE 的表达式写发可以找官网
    t_order_inline: # 自定义的算法名称，上边有用到
      type: CLASS_BASED
      props:
        strategy: STANDARD
        # 下边类是自己写的就是自定义分片算法，这个是shardingsphere 自带的
        # 就是对分片字段（在使用t_order_inline的算法那里有定义） hash 在通过sharding-count的数量取余分片
        algorithmClassName: org.apache.shardingsphere.sharding.algorithm.sharding.mod.HashModShardingAlgorithm
        sharding-count: 2

#  keyGenerators:
#    snowflake:
#      type: SNOWFLAKE
#      props:
#        worker-id: 123  # 工作节点 ID
#        max-tolerate-time-difference-milliseconds: 100
#通用配置
props:
  sql-show: true #是否在日志中打印 SQL打印 SQL 可以帮助开发者快速定位系统问题。日志内容包含：逻辑 SQL，真实 SQL 和 SQL 解析结果。如果开启配置，日志将使用 Topic ShardingSphere-SQL，日志级别是 INFO
